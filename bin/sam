#!/usr/bin/env bash
set -euo pipefail
export IFS=$'\n\t'
# Source: ./core/base.sh
#
# The most basic stuff for SAM
#

# Global variables
SAM_HOME=${SAM_HOME:-}
SAM_DEBUG=${SAM_DEBUG:-}
SAM_VERSION='0.0.1-beta'

if [[ -z "${SAM_HOME}" ]]; then
    SAM_HOME=${XDG_DATA_HOME:=${HOME}/.local/share}/sam
fi

if [[ ! -d "$SAM_HOME" ]]; then
    mkdir -p "$SAM_HOME"
fi

#######################################
# Whether or not the debugging is enabled.
# Globals:
#   SAM_DEBUG
# Arguments:
#   some message
# Returns:
#   boolean
#######################################
sam::core::is_debug_enabled() {
    [[ "${SAM_DEBUG:-}" == "true" ]]
}
export -f sam::core::is_debug_enabled

if sam::core::is_debug_enabled; then
    set -x
fi

# Source: ./core/logger.sh
#
# Functions related to logging.
#

#######################################
# Sends a debug message to stdout.
# Globals:
#   None
# Arguments:
#   some message
# Returns:
#   None
#######################################
sam::core::logger::debug() {
    if sam::core::is_debug_enabled; then
        echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')] [debug]: $@"
    fi
}
export -f sam::core::logger::debug

#######################################
# Sends an info message to stdout.
# Globals:
#   None
# Arguments:
#   some message
# Returns:
#   None
#######################################
sam::core::logger::info() {
    echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')] [info]: $@"
}
export -f sam::core::logger::info

#######################################
# Sends an error message to stderr.
# Globals:
#   None
# Arguments:
#   some message
# Returns:
#   None
#######################################
sam::core::logger::error() {
    echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')] [error]: $@" >&2
}
export -f sam::core::logger::error

# Source: ./core/file.sh
#
# Functions to manipulate files.
#

#######################################
# Gets the file extension.
# Globals:
#   None
# Arguments:
#   filename
#   result - variable that will hold the returned value
# Returns:
#   None
#######################################
sam::core::file::get_extension() {
    local filename=${1:-}
    local -n __result=${2:-}

    __result="${filename##*.}" # get the extension
    __result="${__result,,}" # to lower case
}

# Source: ./core/archive.sh
#
# Functions related to file archives.
#

sam::core::archive::can_extract() {
    local file=${1:-}
    local extension
    sam::core::file::get_extension "${file}" extension
    [[ "$extension" =~ ^(zip|tar|gz|tgz|xz)$ ]]
}

sam::core::archive::extract() {
	local filename=${1:-}
	local destination=${2:-}
	local extension

    sam::core::file::get_extension "${filename}" extension
	destination=$(dirname ${destination})

	if [[ ${extension} == 'zip' ]]; then
		sam::core::archive::extract_zip "$filename" "$destination"
		return
	fi

	if [[ ${filename} =~ .*tar\.gz$ ]]; then
		sam::core::archive::extract_tar "$filename" "$destination"
		return
	fi

	if [[ ${extension} == 'tgz' ]]; then
		sam::core::archive::extract_tar "$filename" "$destination"
		return
	fi

	if [[ ${extension} == 'tar' ]]; then
		sam::core::archive::extract_tar "$filename" "$destination"
		return
	fi

	if [[ ${extension} == 'xz' ]]; then
		sam::core::archive::extract_tar "$filename" "$destination"
		return
	fi

	if [[ ${extension} == 'gz' ]]; then
		sam::core::archive::extract_gzip "$filename" "$destination"
		return
	fi

	false
}

sam::core::archive::extract_zip() {
	local filename=${1:-}
	local destination=${2:-}
	unzip -o -q "$filename" -d "$destination"
}

sam::core::archive::extract_tar() {
	local filename=${1:-}
	local destination=${2:-}
	tar --extract --file "$filename" --directory "$destination"
}

sam::core::archive::extract_gzip() {
	local filename=${1:-}
	local destination=${2:-}

	pushd "$destination" 2>/dev/null
	gunzip "$filename"
	popd "$destination" 2>/dev/null
}

# Source: ./core/http.sh
#
# Functions related to HTTP connection.
#

#######################################
# Sends a GET request and echo the
# response.
# Globals:
#   None
# Arguments:
#   URL
# Returns:
#   None
#######################################
sam::core::http::get() {
    local url=${1:-}
    local params

    if sam::core::is_debug_enabled; then
        params='-v'
    else
        params='--silent'
    fi

    curl --location --fail --show-error ${params} "${url}"
}
export -f sam::core::http::get

#######################################
# Downloads a file.
# Globals:
#   None
# Arguments:
#   URL
#   Complete destination path
# Returns:
#   None
#######################################
sam::core::http::download() {
    local url=${1:-}
    local destination=${2:-}
    local params

    if sam::core::is_debug_enabled; then
        params='-v'
    else
        params='--silent'
    fi

    curl --location --fail --show-error ${params} --output "${destination}" "${url}"
}
export -f sam::core::http::download

# Source: ./core/database.sh
#
# Database
#

if [[ -z "${SAM_HOME}" ]]; then
    echo SAM_HOME is undefined
    exit 1
fi

SAM_DATABASE=${SAM_HOME}/db.sh
if [[ ! -e "${SAM_DATABASE}" ]]; then
    touch "${SAM_DATABASE}"
fi

declare -A SAN_ARTIFACTS

declare -A SAN_CURRENT_ARTIFACT
SAN_CURRENT_ARTIFACT['NAME']=
SAN_CURRENT_ARTIFACT['TYPE']=
SAN_CURRENT_ARTIFACT['UPSTREAM_VERSION']=
SAN_CURRENT_ARTIFACT['LOCAL_VERSION']=
SAN_CURRENT_ARTIFACT['DIR']=
SAN_CURRENT_ARTIFACT['PATH']=

encode_array() { declare -n __p="$1"; for k in "${!__p[@]}"; do printf "[%s]='%s' " "$k" "${__p[$k]}" ; done ;  }

sam::core::database::set_name() {
    SAN_CURRENT_ARTIFACT['NAME']=${1}
}
sam::core::database::set_type() {
    SAN_CURRENT_ARTIFACT['TYPE']=${1}
}
sam::core::database::set_upstream_version() {
    SAN_CURRENT_ARTIFACT['UPSTREAM_VERSION']=${1}

    source ${SAM_DATABASE} # load the database

    name=${SAN_CURRENT_ARTIFACT['NAME']}
    if [[ ${SAN_ARTIFACTS[$name]+_} ]]; then
        value=$(echo "${SAN_ARTIFACTS[$name]}")
        eval "declare -A STORED=(${value})"

        if [[ ${SAN_CURRENT_ARTIFACT['UPSTREAM_VERSION']} == ${STORED['UPSTREAM_VERSION']} ]]; then
            sam::core::logger::info "${SAN_CURRENT_ARTIFACT['NAME']} is up to date."
            exit 0
        fi
    fi
}
sam::core::database::set_local_version() {
    SAN_CURRENT_ARTIFACT['LOCAL_VERSION']=${1}
}
#sam::core::database::set_dir() {
#    SAN_CURRENT_ARTIFACT['DIR']=${1}
#}
#sam::core::database::set_PATH() {
#    SAN_CURRENT_ARTIFACT['PATH']=${1}
#}

sam::core::database::save() {
    local name

    source ${SAM_DATABASE} # load the database

    unset SAN_CURRENT_ARTIFACT['DIR']
    unset SAN_CURRENT_ARTIFACT['PATH']

    name=${SAN_CURRENT_ARTIFACT['NAME']}
    SAN_ARTIFACTS[$name]=$(encode_array SAN_CURRENT_ARTIFACT)
    typeset -p SAN_ARTIFACTS > ${SAM_DATABASE} # update the database
}

# Source: ./processor/dpkg.sh
#
# Dpkg processor
#

#######################################
# Install the specified deb file.
# Globals:
#   None
# Arguments:
#   file path
# Returns:
#   None
#######################################
sam::processor::dpkg::install() {
    local file=${1:-}
    sam::core::logger::info "Installing $file"
    sudo dpkg --install "${file}"
}

# Source: ./processor/font.sh

# Source: ./processor/rpm.sh
#
# rpm processor
#

#######################################
# Install the specified rpm file.
# Globals:
#   None
# Arguments:
#   file path
# Returns:
#   None
#######################################
sam::processor::rpm::install() {
    local file=${1:-}
    sam::core::logger::info "Installing $file"
    sudo rpm --install --force "${file}"
}

# Source: ./processor/tar.sh
#
# tar processor
#

#######################################
# Install the specified tar file.
# Globals:
#   None
# Arguments:
#   file path
# Returns:
#   None
#######################################
sam::processor::tar::install() {
    local file=${1:-}
    sam::core::logger::info "Installing $file"
    echo "TODO"
    exit 1
}

# Source: ./core/artifact.sh
#
# Functions related to the artifact
# itself.
#

#######################################
# Download the artifact.
# Globals:
#   SAN_CURRENT_ARTIFACT
# Arguments:
#   URL
# Returns:
#   None
#######################################
sam::core::artifact::download() {
    local url=${1:-}
    local filename

    filename=$(basename ${url})
    SAN_CURRENT_ARTIFACT['DIR']=$(mktemp -d)
	SAN_CURRENT_ARTIFACT['PATH']=${SAN_CURRENT_ARTIFACT['DIR']}/${filename}

    sam::core::logger::debug "Downloading artifact from ${url} to ${SAN_CURRENT_ARTIFACT['PATH']}..."

    sam::core::http::download "${url}" "${SAN_CURRENT_ARTIFACT['PATH']}"
}

#######################################
# Tries to handle the downloaded
# artifact.
# Globals:
#   SAN_CURRENT_ARTIFACT
# Arguments:
#   None
# Returns:
#   None
#######################################
sam::core::artifact::handle() {
    if [[ ! ${SAN_CURRENT_ARTIFACT['PATH']+_} ]]; then
        sam::core::logger::error "Artifact not defined."
        exit 1
    fi

	local extension=
	local tmp_destination=
	local artifact_path=${SAN_CURRENT_ARTIFACT['PATH']}

	tmp_destination=$(mktemp -d)

	sam::core::logger::debug "Handling the artifact ${artifact_path}"

	sam::core::file::get_extension "${artifact_path}" extension

    if sam::core::archive::can_extract "${artifact_path}"; then
        sam::core::archive::extract "${artifact_path}" "${tmp_destination}"
        # TODO move to /usr/local/bin?
        rm "${artifact_path}"
    elif [[ "${extension}" == 'deb' ]]; then
        sam::processor::dpkg::install "${artifact_path}"
        rm "${artifact_path}"
    elif [[ "${extension}" == 'rpm' ]]; then
        sam::processor::rpm::install "${artifact_path}"
        rm "${artifact_path}"
    else
        mv "${artifact_path}" "$tmp_destination"
    fi

    rmdir ${tmp_destination}

    # the artifact was handled and now the local version is equal to upstream version
    sam::core::database::set_local_version ${SAN_CURRENT_ARTIFACT['UPSTREAM_VERSION']}
    sam::core::database::save
}

# Source: ./provider/github-release.sh
#
# Provider for getting GitHub releases.
#
# @see https://help.github.com/en/articles/about-releases

#######################################
# Downloads the latest release artifact
# of the project identified by the
# supplied namespace.
# file.
# Globals:
#   None
# Arguments:
#   namespace
#   regex
# Returns:
#   None
#######################################
sam::provider::github_release::get_latest() {
    local namespace=${1:-}
    local regex=${2:-}
    local id link

    id=$(sam::provider::github_release::get_latest_id ${namespace})
    sam::core::database::set_upstream_version "${id}"

    link=$(sam::provider::github_release::asset_url ${namespace} ${id} ${regex})

    sam::core::logger::info "Downloading $link"
    sam::core::artifact::download "${link}"
}
export -f sam::provider::github_release::get_latest

#######################################
# Returns the ID for the latest release
# of the project identified by the
# supplied namespace.
# Globals:
#   None
# Arguments:
#   namespace
# Returns:
#   None
#######################################
sam::provider::github_release::get_latest_id() {
    local namespace=${1:-}
    sam::core::http::get "https://api.github.com/repos/${namespace}/releases/latest" \
        | grep --only-matching --perl-regexp '"id": \K(.*)(?=,)' \
        | head -1 # --max-count=1 does not work
}
export -f sam::provider::github_release::get_latest_id

#######################################
# Returns the asset url that matches
# $regex.
# Globals:
#   None
# Arguments:
#   namespace
#   release id
#   regex
# Returns:
#   None
#######################################
sam::provider::github_release::asset_url() {
    local namespace=${1:-}
    local id=${2:-}
    local regex=${3:-}
    sam::core::http::get "https://api.github.com/repos/${namespace}/releases/${id}/assets" \
        | grep --only-matching --perl-regexp '"browser_download_url": "\K(.*)(?=")' \
        | grep --perl-regexp ${regex}
}
export -f sam::provider::github_release::asset_url

# Source: ./core/main.sh
#
# Main function.
#
main() {
    sam::core::logger::debug "Starting"

    declare -A SAN_PARSED_ARGUMENTS
    SAN_PARSED_ARGUMENTS[INSTALL]=
    SAN_PARSED_ARGUMENTS[FROM]='github-release'
    SAN_PARSED_ARGUMENTS[FILTER]=
    SAN_PARSED_ARGUMENTS[AS]=

    for arg in "$@"; do
        case ${arg} in
            install=*)
                SAN_PARSED_ARGUMENTS[INSTALL]="${arg#*=}"
                shift
                ;;
            from=*)
                SAN_PARSED_ARGUMENTS[FROM]="${arg#*=}"
                shift
                ;;
            filter=*)
                SAN_PARSED_ARGUMENTS[FILTER]="${arg#*=}"
                shift
                ;;
            as=*)
                SAN_PARSED_ARGUMENTS[AS]="${arg#*=}"
                shift
                ;;
            *)
                echo "The option ${arg} is unknown."
                exit 1
                ;;
        esac
    done

    if [[ "${SAN_PARSED_ARGUMENTS[FROM]}" == 'github-release' ]]; then
        sam::core::database::set_name "${SAN_PARSED_ARGUMENTS[INSTALL]}"
        sam::core::database::set_type 'github_release'

        if [[ -z "${SAN_PARSED_ARGUMENTS[FILTER]}" ]]; then
            build_filter SAN_PARSED_ARGUMENTS[FILTER]
        fi

        sam::provider::github_release::get_latest "${SAN_PARSED_ARGUMENTS[INSTALL]}" "${SAN_PARSED_ARGUMENTS[FILTER]}"
        sam::core::artifact::handle
    else
        sam::core::logger::error "The value \"${SAN_PARSED_ARGUMENTS[FROM]}\" is not accepted in the \"from\" statement."
    fi
}

build_filter() {
    local -n __result=${1:-}

    arch=$(uname --machine)
    uses_dpkg=$(dpkg -l 2>/dev/null && echo "yes" || echo "no")
    uses_rpm=$(rpm -qa 2>/dev/null && echo "yes" || echo "no")

    if [[ "$uses_dpkg" != 'no' ]]; then
        extension="deb"
        if [[ $arch == 'x86_64' ]]; then
            arch='amd64'
        fi
    fi
    if [[ "$uses_rpm" != 'no' ]]; then
        extension="rpm"
    fi

    __result="$arch.$extension$"
}

main "$@"
